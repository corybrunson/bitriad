// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// wedges_x0w0m0c0
List wedges_x0w0m0c0(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m0c0(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m0c0(el, q));
    return rcpp_result_gen;
END_RCPP
}
// wedges_x0w0m0c1
List wedges_x0w0m0c1(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m0c1(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m0c1(el, q));
    return rcpp_result_gen;
END_RCPP
}
// wedges_x0w0m0c2
List wedges_x0w0m0c2(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m0c2(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m0c2(el, q));
    return rcpp_result_gen;
END_RCPP
}
// wedges_x0w0m1c0
List wedges_x0w0m1c0(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m1c0(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m1c0(el, q));
    return rcpp_result_gen;
END_RCPP
}
// wedges_x0w0m1c1
List wedges_x0w0m1c1(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m1c1(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m1c1(el, q));
    return rcpp_result_gen;
END_RCPP
}
// wedges_x0w0m1c2
List wedges_x0w0m1c2(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m1c2(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m1c2(el, q));
    return rcpp_result_gen;
END_RCPP
}
// wedges_x0w0m2c0
List wedges_x0w0m2c0(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m2c0(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m2c0(el, q));
    return rcpp_result_gen;
END_RCPP
}
// wedges_x0w0m2c1
List wedges_x0w0m2c1(IntegerMatrix el, int q);
RcppExport SEXP _bitriad_wedges_x0w0m2c1(SEXP elSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(wedges_x0w0m2c1(el, q));
    return rcpp_result_gen;
END_RCPP
}
// index_subset
IntegerVector index_subset(int i);
RcppExport SEXP _bitriad_index_subset(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(index_subset(i));
    return rcpp_result_gen;
END_RCPP
}
// subset_index
int subset_index(IntegerVector vec);
RcppExport SEXP _bitriad_subset_index(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_index(vec));
    return rcpp_result_gen;
END_RCPP
}
// subset_partition
IntegerVector subset_partition(IntegerVector vec);
RcppExport SEXP _bitriad_subset_partition(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(subset_partition(vec));
    return rcpp_result_gen;
END_RCPP
}
// partition_subset
IntegerVector partition_subset(IntegerVector lambda);
RcppExport SEXP _bitriad_partition_subset(SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(partition_subset(lambda));
    return rcpp_result_gen;
END_RCPP
}
// index_partition
IntegerVector index_partition(int i);
RcppExport SEXP _bitriad_index_partition(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(index_partition(i));
    return rcpp_result_gen;
END_RCPP
}
// partition_index
int partition_index(IntegerVector lambda);
RcppExport SEXP _bitriad_partition_index(SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(partition_index(lambda));
    return rcpp_result_gen;
END_RCPP
}
// triad_census_batagelj_mrvar_C
IntegerMatrix triad_census_batagelj_mrvar_C(IntegerMatrix el);
RcppExport SEXP _bitriad_triad_census_batagelj_mrvar_C(SEXP elSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    rcpp_result_gen = Rcpp::wrap(triad_census_batagelj_mrvar_C(el));
    return rcpp_result_gen;
END_RCPP
}
// triad_census_batagelj_mrvar_alt_C
IntegerMatrix triad_census_batagelj_mrvar_alt_C(IntegerMatrix el, IntegerVector actors, int max_weight);
RcppExport SEXP _bitriad_triad_census_batagelj_mrvar_alt_C(SEXP elSEXP, SEXP actorsSEXP, SEXP max_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type actors(actorsSEXP);
    Rcpp::traits::input_parameter< int >::type max_weight(max_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(triad_census_batagelj_mrvar_alt_C(el, actors, max_weight));
    return rcpp_result_gen;
END_RCPP
}
// triad_census_binary_batagelj_mrvar_C
IntegerMatrix triad_census_binary_batagelj_mrvar_C(IntegerMatrix el);
RcppExport SEXP _bitriad_triad_census_binary_batagelj_mrvar_C(SEXP elSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type el(elSEXP);
    rcpp_result_gen = Rcpp::wrap(triad_census_binary_batagelj_mrvar_C(el));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bitriad_wedges_x0w0m0c0", (DL_FUNC) &_bitriad_wedges_x0w0m0c0, 2},
    {"_bitriad_wedges_x0w0m0c1", (DL_FUNC) &_bitriad_wedges_x0w0m0c1, 2},
    {"_bitriad_wedges_x0w0m0c2", (DL_FUNC) &_bitriad_wedges_x0w0m0c2, 2},
    {"_bitriad_wedges_x0w0m1c0", (DL_FUNC) &_bitriad_wedges_x0w0m1c0, 2},
    {"_bitriad_wedges_x0w0m1c1", (DL_FUNC) &_bitriad_wedges_x0w0m1c1, 2},
    {"_bitriad_wedges_x0w0m1c2", (DL_FUNC) &_bitriad_wedges_x0w0m1c2, 2},
    {"_bitriad_wedges_x0w0m2c0", (DL_FUNC) &_bitriad_wedges_x0w0m2c0, 2},
    {"_bitriad_wedges_x0w0m2c1", (DL_FUNC) &_bitriad_wedges_x0w0m2c1, 2},
    {"_bitriad_index_subset", (DL_FUNC) &_bitriad_index_subset, 1},
    {"_bitriad_subset_index", (DL_FUNC) &_bitriad_subset_index, 1},
    {"_bitriad_subset_partition", (DL_FUNC) &_bitriad_subset_partition, 1},
    {"_bitriad_partition_subset", (DL_FUNC) &_bitriad_partition_subset, 1},
    {"_bitriad_index_partition", (DL_FUNC) &_bitriad_index_partition, 1},
    {"_bitriad_partition_index", (DL_FUNC) &_bitriad_partition_index, 1},
    {"_bitriad_triad_census_batagelj_mrvar_C", (DL_FUNC) &_bitriad_triad_census_batagelj_mrvar_C, 1},
    {"_bitriad_triad_census_batagelj_mrvar_alt_C", (DL_FUNC) &_bitriad_triad_census_batagelj_mrvar_alt_C, 3},
    {"_bitriad_triad_census_binary_batagelj_mrvar_C", (DL_FUNC) &_bitriad_triad_census_binary_batagelj_mrvar_C, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bitriad(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
