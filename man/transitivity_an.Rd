% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transitivity-an.R
\name{transitivity_an}
\alias{centeredTriads}
\alias{excl.transitivity}
\alias{excl_transitivity}
\alias{indequ.transitivity}
\alias{indequ_transitivity}
\alias{indstr.transitivity}
\alias{indstr_transitivity}
\alias{injact.transitivity}
\alias{injact_transitivity}
\alias{injequ.transitivity}
\alias{injequ_transitivity}
\alias{injstr.transitivity}
\alias{injstr_transitivity}
\alias{opsahl.transitivity}
\alias{opsahl_transitivity}
\alias{transitivity.an}
\alias{transitivity.an.triads}
\alias{transitivity.an.wedges}
\alias{transitivity_an}
\alias{transitivity_an_triads}
\alias{transitivity_an_wedges}
\alias{triadWedges}
\title{Affiliation network clustering coefficients}
\usage{
transitivity_an(bigraph, type = "global", wedgeFun, flavor,
  vids = which(!V(bigraph)$type), add.names = FALSE)

transitivity_an_triads(bigraph, vids = which(!V(bigraph)$type), flavor)

transitivity_an_wedges(bigraph, vids = which(!V(bigraph)$type), wedgeFun)

transitivity.an(bigraph, type = "global", wedgeFun, flavor,
  vids = which(!V(bigraph)$type), add.names = FALSE)

transitivity.an.triads(bigraph, vids = which(!V(bigraph)$type), flavor)

transitivity.an.wedges(bigraph, vids = which(!V(bigraph)$type), wedgeFun)

centeredTriads(bigraph, vids)

triadWedges(triads, flavor)

indequ_transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

indequ.transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

indstr_transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

indstr.transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

injact_transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

injact.transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

injequ_transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

injequ.transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

injstr_transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

injstr.transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

opsahl_transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

opsahl.transitivity(bigraph, type = "global",
  vids = which(!V(bigraph)$type))

excl_transitivity(bigraph, type = "global", vids = which(!V(bigraph)$type))

excl.transitivity(bigraph, type = "global", vids = which(!V(bigraph)$type))
}
\arguments{
\item{bigraph}{An affiliation network; see \code{is_an}.}

\item{type}{Character; the type of clustering coefficient (defaults to 
"global").}

\item{wedgeFun}{The wedge function; overrides \code{flavor}.}

\item{flavor}{The flavor of transitivity to be used; overridden by 
\code{wedgeFun}.}

\item{vids}{A subset of actor node ids at which to evaluate the local 
clustering coefficient.}

\item{add.names}{Logical; whether to label the matrix rows and columns.}

\item{triads}{A matrix of centered triads.}
}
\value{
If \code{type} is "global", the global clustering coefficient of the 
  network; if "local", the local clustering coefficients of the actors; 
  otherwise, a 2-column matrix, each row of which gives the number of wedges 
  and the number of closed wedges centered at each actor.
}
\description{
This function computes a given flavor of transitivity (triadic closure) on a 
given affiliation network. The calculations are performed locally. Each 
flavor is defined as a proportion of "wedges" that are "closed", for suitable
definitions of both terms. The function \code{transitivity_an} is a shell
that proceeds across actors and computes wedges using the provided 
\code{wedgeFun}. These functions count the "wedges", and among them the 
"closed" ones, centered at a given actor node in a given affiliation network.
The triads method \code{transitivity_an_triads} first classifies every triad
centered at each node. The appropriate formula then counts the wedges and
closed wedges at each. The method is slower for a single flavor but can be
used to produce multiple flavors with negligible additional computational
cost. The wedges method \code{transitivity_an_wedges} relies on a separate
"wedge function" for each statistic. The algorithm calls the appropriate
wedge function to run over the necessary wedge centers and return a wedge
count matrix, which is returned back into \code{transitivity_an} for
outputting.
}
\examples{
data(women_clique)
sapply(c(injequ_wedges, injstr_wedges, indstr_wedges),
         transitivity_an, bigraph = women_clique, type = "local")
data(women_group)
cbind(
    project_transitivity(women_group, type = "local"),
    opsahl_transitivity(women_group, type = "local"),
    excl_transitivity(women_group, type = "local")
)
}

